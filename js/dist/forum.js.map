{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@clarkwinkelmann/who-read/webpack/bootstrap","webpack://@clarkwinkelmann/who-read/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/who-read/webpack/runtime/define property getters","webpack://@clarkwinkelmann/who-read/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/who-read/webpack/runtime/make namespace object","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/extend']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['forum/app']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['forum/states/DiscussionListState']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/components/Badge']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/Model']\"","webpack://@clarkwinkelmann/who-read/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@clarkwinkelmann/who-read/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@clarkwinkelmann/who-read/./src/forum/models/UserState.ts","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['forum/components/DiscussionHero']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/components/Tooltip']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/helpers/avatar']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/helpers/listItems']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/utils/humanTime']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@clarkwinkelmann/who-read/./src/forum/utils/appendReaderBadges.ts","webpack://@clarkwinkelmann/who-read/./src/forum/utils/normalizePostNumber.ts","webpack://@clarkwinkelmann/who-read/./src/forum/components/AvatarSummary.ts","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/components/Link']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/helpers/username']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/helpers/userOnline']\"","webpack://@clarkwinkelmann/who-read/./src/forum/components/AvatarsDetails.ts","webpack://@clarkwinkelmann/who-read/./src/forum/components/ReadersModal.ts","webpack://@clarkwinkelmann/who-read/./src/forum/utils/filterVeryBehind.ts","webpack://@clarkwinkelmann/who-read/./src/forum/utils/normalizeReadersRelationship.ts","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['forum/components/DiscussionList']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['forum/components/Post']\"","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@clarkwinkelmann/who-read/./src/forum/components/UnreadButton.ts","webpack://@clarkwinkelmann/who-read/./src/forum/addInPostStream.ts","webpack://@clarkwinkelmann/who-read/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@clarkwinkelmann/who-read/./src/forum/index.ts","webpack://@clarkwinkelmann/who-read/./src/forum/addInDiscussionHero.ts","webpack://@clarkwinkelmann/who-read/./src/forum/addInDiscussionList.ts","webpack://@clarkwinkelmann/who-read/./src/forum/addUnreadControls.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/DiscussionListState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Badge'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import Model from 'flarum/common/Model';\nimport User from 'flarum/common/models/User';\n\nexport default class UserState extends Model {\n    last_read_at = Model.attribute<string>('last_read_at');\n    last_read_post_number = Model.attribute<number | null>('last_read_post_number');\n    subscription = Model.attribute<string | null>('subscription');\n    unread = Model.attribute<boolean>('unread');\n    user = Model.hasOne<User>('user');\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionHero'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Tooltip'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/avatar'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/listItems'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/humanTime'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","import app from 'flarum/forum/app';\nimport Badge from 'flarum/common/components/Badge';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport UserState from '../models/UserState';\n\nconst translationPrefix = 'clarkwinkelmann-who-read.forum.badges.';\n\nexport default function (badges: ItemList<any>, reader: UserState) {\n    if (flarum.extensions['flarum-subscriptions']) {\n        switch (reader.subscription()) {\n            case 'follow':\n                badges.add('subscriptions-follow', Badge.component({\n                    label: app.translator.trans(translationPrefix + 'following'),\n                    icon: 'fas fa-star',\n                    type: 'following',\n                }));\n                break;\n            case 'ignore':\n                badges.add('subscriptions-ignoring', Badge.component({\n                    label: app.translator.trans(translationPrefix + 'ignoring'),\n                    icon: 'far fa-eye-slash',\n                    type: 'ignoring',\n                }));\n                break;\n        }\n    }\n\n    if (reader.unread()) {\n        badges.add('who-read-unread', Badge.component({\n            type: 'who-read-unread',\n            icon: app.forum.attribute('who-read.unreadIcon'),\n            label: app.translator.trans(translationPrefix + 'unread'),\n        }));\n    }\n}\n","export default function (number: number | null | undefined): number {\n    return number || 0;\n}\n","import {ClassComponent, Vnode} from 'mithril';\nimport app from 'flarum/forum/app';\nimport Tooltip from 'flarum/common/components/Tooltip';\nimport avatar from 'flarum/common/helpers/avatar';\nimport listItems from 'flarum/common/helpers/listItems';\nimport extractText from 'flarum/common/utils/extractText';\nimport humanTime from 'flarum/common/utils/humanTime';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Discussion from 'flarum/common/models/Discussion';\nimport appendReaderBadges from '../utils/appendReaderBadges';\nimport UserState from '../models/UserState';\nimport normalizePostNumber from '../utils/normalizePostNumber';\n\nconst translationPrefix = 'clarkwinkelmann-who-read.forum.';\n\ninterface AvatarSummaryAttrs {\n    readers: UserState[]\n    extendable: boolean\n    discussion: Discussion\n}\n\nexport default class AvatarSummary implements ClassComponent<AvatarSummaryAttrs> {\n    showAll: boolean = false\n\n    view(vnode: Vnode<AvatarSummaryAttrs>) {\n        const LIMIT = app.forum.attribute<number>('who-read.maxVisible');\n\n        const {readers, extendable, discussion} = vnode.attrs;\n\n        return m('ul.WhoRead-list.WhoRead-summary', readers.map((reader, index) => {\n            if (!this.showAll) {\n                if (index === LIMIT) {\n                    const howManyMore = readers.length - LIMIT;\n\n                    return m('span.Avatar.WhoRead-more', {\n                        // Not using a tooltip here because it kind of breaks if a tooltip is open while Mithril redraws\n                        title: extractText(app.translator.trans(translationPrefix + 'more.' + (extendable ? 'show' : 'info'), {\n                            count: howManyMore,\n                        })),\n                        onclick: (event: Event) => {\n                            if (extendable) {\n                                event.stopPropagation();\n                                this.showAll = true;\n                            }\n                        },\n                    }, '+' + howManyMore);\n                }\n\n                if (index >= LIMIT) {\n                    return null;\n                }\n            }\n\n            const user = reader.user();\n\n            // Most likely this shouldn't happen, unless the database integrity is broken\n            if (!user) {\n                return null;\n            }\n\n            const badges = new ItemList();\n\n            appendReaderBadges(badges, reader);\n\n            const outdated = reader.unread() || (discussion && normalizePostNumber(reader.last_read_post_number()) < normalizePostNumber(discussion.lastPostNumber()));\n\n            let toolTipTranslationKey = 'last-read-at';\n\n            if (discussion) {\n                toolTipTranslationKey = outdated ? 'last-read-at-behind' : 'last-read-at-up-to-date';\n            }\n\n            return m('li.WhoRead-item', m(Tooltip, {\n                text: extractText(app.translator.trans(translationPrefix + 'tooltip.' + toolTipTranslationKey, {\n                    user,\n                    ago: humanTime(reader.last_read_at()),\n                })),\n            }, m('.WhoRead-avatar', {\n                className: outdated ? 'WhoRead-avatar--outdated' : '',\n            }, [\n                avatar(user),\n                m('ul.badges', listItems(badges.toArray())),\n            ])));\n        }));\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/username'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/userOnline'];","import {ClassComponent, Vnode} from 'mithril';\nimport app from 'flarum/forum/app';\nimport Link from 'flarum/common/components/Link';\nimport Tooltip from 'flarum/common/components/Tooltip';\nimport avatar from 'flarum/common/helpers/avatar';\nimport listItems from 'flarum/common/helpers/listItems';\nimport username from 'flarum/common/helpers/username';\nimport userOnline from 'flarum/common/helpers/userOnline';\nimport extractText from 'flarum/common/utils/extractText';\nimport humanTime from 'flarum/common/utils/humanTime';\nimport appendReaderBadges from '../utils/appendReaderBadges';\nimport UserState from '../models/UserState';\n\ninterface AvatarsDetailsAttrs {\n    readers: UserState[]\n}\n\nexport default class AvatarsDetails implements ClassComponent<AvatarsDetailsAttrs> {\n    view(vnode: Vnode<AvatarsDetailsAttrs>) {\n        return m('ul.WhoRead-list.WhoRead-details', vnode.attrs.readers.map(reader => {\n            const user = reader.user();\n\n            // Most likely this shouldn't happen, unless the database integrity is broken\n            if (!user) {\n                return null;\n            }\n\n            const badges = user.badges();\n\n            appendReaderBadges(badges, reader);\n\n            return m('li.WhoRead-item', m(Tooltip, {\n                text: extractText(app.translator.trans('clarkwinkelmann-who-read.forum.tooltip.last-read-at', {\n                    user,\n                    ago: humanTime(reader.last_read_at()),\n                })),\n            }, m(Link, {\n                href: app.route.user(user),\n                'data-container': 'body', // Bootstrap tooltip option so we overflow .Modal edge\n            }, [\n                m('.WhoRead-avatar', [\n                    avatar(user),\n                    m('ul.badges', listItems(badges.toArray())),\n                ]),\n                m('.WhoRead-user', [\n                    userOnline(user),\n                    username(user),\n                ]),\n            ])));\n        }));\n    }\n}\n","import app from 'flarum/forum/app';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport AvatarsDetails from './AvatarsDetails';\nimport UserState from '../models/UserState';\n\nconst translationPrefix = 'clarkwinkelmann-who-read.forum.modal.';\n\ntype Section = 'readersUntilHereOnly' | 'readersFurther' | 'readersEnd' | 'readersBehind';\n\ntype ReadersModalAttrs = IInternalModalAttrs & {\n    [key in Section]: UserState[];\n};\n\nexport default class ReadersModal extends Modal<ReadersModalAttrs> {\n    className() {\n        return 'ReadersModal';\n    }\n\n    title() {\n        return app.translator.trans(translationPrefix + 'title');\n    }\n\n    content() {\n        return m('.Modal-body', [\n            this.section('readersUntilHereOnly', 'up-to-this-post'),\n            this.section('readersFurther', 'past-this-post'),\n            this.section('readersEnd', 'to-the-end'),\n            this.section('readersBehind', 'behind'),\n        ]);\n    }\n\n    section(dataKey: Section, translationKey: string) {\n        if (!this.attrs[dataKey] || !this.attrs[dataKey].length) {\n            return null;\n        }\n\n        return [\n            m('h3', app.translator.trans(translationPrefix + translationKey)),\n            m(AvatarsDetails, {\n                readers: this.attrs[dataKey],\n            }),\n        ];\n    }\n}\n","import app from 'flarum/forum/app';\nimport Discussion from 'flarum/common/models/Discussion';\nimport UserState from '../models/UserState';\nimport normalizePostNumber from './normalizePostNumber';\n\nexport default function (readers: UserState[], discussion: Discussion): UserState[] {\n    return readers.filter(reader => {\n        // The last post number might be null if the user marked as unread. In this case we hide them\n        if (reader.last_read_post_number() === null) {\n            return false;\n        }\n\n        const behindThreshold = app.forum.attribute<number>('who-read.hideWhenBehind');\n\n        if (!behindThreshold) {\n            return true;\n        }\n\n        return normalizePostNumber(reader.last_read_post_number()) > normalizePostNumber(discussion.lastPostNumber()) - behindThreshold;\n    });\n}\n","import UserState from '../models/UserState';\n\nexport default function (readers: (UserState | undefined)[] | false): UserState[] {\n    if (readers === false) {\n        return [];\n    }\n\n    // @ts-ignore for some reason typescript cannot understand this works\n    return readers.filter(reader => typeof reader !== 'undefined');\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionListItem'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Post'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","import {ClassComponent, Vnode} from 'mithril';\nimport app from 'flarum/forum/app';\nimport Button from 'flarum/common/components/Button';\nimport Discussion from 'flarum/common/models/Discussion';\n\ninterface UnreadButtonAttrs {\n    discussion: Discussion\n    className: string\n}\n\nexport default class UnreadButton implements ClassComponent<UnreadButtonAttrs> {\n    view(vnode: Vnode<UnreadButtonAttrs>) {\n        const {discussion, className} = vnode.attrs;\n\n        const unread = !!discussion.attribute('whoReadUnread');\n\n        return Button.component({\n            className,\n            icon: app.forum.attribute('who-read.unreadIcon'),\n            onclick() {\n                discussion.save({\n                    whoReadUnread: !unread,\n                }).then(() => {\n                    m.redraw();\n                });\n            },\n        }, app.translator.trans('clarkwinkelmann-who-read.forum.controls.' + (unread ? 'remove' : 'set') + '-unread'));\n    }\n}\n","import {extend} from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport Button from 'flarum/common/components/Button';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport Post from 'flarum/forum/components/Post';\nimport icon from 'flarum/common/helpers/icon';\nimport PostModel from 'flarum/common/models/Post';\nimport extractText from 'flarum/common/utils/extractText';\nimport AvatarSummary from './components/AvatarSummary';\nimport ReadersModal from './components/ReadersModal';\nimport UnreadButton from './components/UnreadButton';\nimport UserState from './models/UserState';\nimport normalizePostNumber from './utils/normalizePostNumber';\nimport normalizeReadersRelationship from './utils/normalizeReadersRelationship';\n\nconst translationPrefix = 'clarkwinkelmann-who-read.forum.footer.';\n\nexport default function () {\n    extend(Post.prototype, 'oninit', function () {\n        if (!app.forum.attribute('who-read.showBetweenPosts')) {\n            return;\n        }\n\n        this.subtree.check(\n            // Refresh if the user toggles between read and unread\n            () => this.attrs.post.discussion().attribute('whoReadUnread'),\n            // Make the post redraws when the last read post number changes,\n            // so that scrolling through the discussion reflects your own read status\n            () => this.attrs.post.discussion().lastReadPostNumber(),\n            // Because of some odd magic in Flarum's store, discussion.whoReadUnread and discussion.lastReadPostNumber\n            // are actually updated just slightly before the relationship and a redraw triggers in between\n            // So this makes the post redraw too early and since the relationship is used to render the avatars\n            // and badges they won't be up to date. So we need to use the relationship as source of data as well\n            () => JSON.stringify(normalizeReadersRelationship(this.attrs.post.discussion().clarkwinkelmannWhoReaders()).map((reader: UserState) => [\n                // The state ID will contain the user ID, so together with the other informations we can be sure it's a different state\n                reader.id(),\n                // Fixes the unread badge appearing out of sync on the user avatars\n                reader.unread(),\n                // Fixes the avatars not updating as you scroll\n                reader.last_read_post_number(),\n            ]))\n        );\n    });\n\n    // For some reason extending Post is not enough to work for CommentPost. So we also add it to CommentPost\n    [Post, CommentPost].forEach(Component => {\n        extend(Component.prototype, 'footerItems', function (items) {\n            if (!app.forum.attribute('who-read.showBetweenPosts')) {\n                return;\n            }\n\n            const post: PostModel = this.attrs.post;\n            const discussion = post.discussion();\n\n            // If the post is loaded on a user profile, we don't have access to the list\n            // of post IDs in that discussion. If that's the case, skip\n            // We can't just check the output of discussion.postIds() because on the\n            //  profile page it throws an exception because relationships is undefined\n            if (!discussion.data.relationships || !discussion.data.relationships.posts) {\n                return;\n            }\n\n            const postIds = discussion.postIds();\n            const currentPostIndex = postIds.indexOf(post.id()!);\n\n            if (currentPostIndex !== -1 && currentPostIndex + 1 < postIds.length) {\n                const nextPostId = postIds[currentPostIndex + 1];\n                const nextPost = app.store.getById<PostModel>('posts', nextPostId);\n\n                if (nextPost) {\n                    const readersUntilHereOnly = normalizeReadersRelationship(discussion.clarkwinkelmannWhoReaders()).filter(\n                        reader => normalizePostNumber(reader.last_read_post_number()) >= post.number() && normalizePostNumber(reader.last_read_post_number()) < nextPost.number()\n                    );\n\n                    const readersFurther = normalizeReadersRelationship(discussion.clarkwinkelmannWhoReaders()).filter(\n                        reader => normalizePostNumber(reader.last_read_post_number()) >= nextPost.number()\n                    );\n\n                    const totalReadersWhoHaveSeenThisPost = readersUntilHereOnly.length + readersFurther.length;\n\n                    let title = extractText(app.translator.trans(translationPrefix + 'read-this-post', {\n                        count: totalReadersWhoHaveSeenThisPost,\n                    }));\n\n                    if (totalReadersWhoHaveSeenThisPost > 0) {\n                        title += '. ' + extractText(app.translator.trans(translationPrefix + 'read-no-further', {\n                            count: readersUntilHereOnly.length,\n                        }));\n                    }\n\n                    items.add('who-read', Button.component({\n                        className: 'Button Button--link',\n                        onclick: (event: Event) => {\n                            event.preventDefault();\n\n                            app.modal.show(ReadersModal, {\n                                readersUntilHereOnly,\n                                readersFurther,\n                            });\n                        },\n                        title,\n                    }, [\n                        app.forum.attribute('who-read.showCountOfReadersWhoStopped') ? readersUntilHereOnly.length : totalReadersWhoHaveSeenThisPost,\n                        ' ',\n                        icon('fas fa-check-double'),\n                        ' ',\n                        m(AvatarSummary, {\n                            readers: readersUntilHereOnly,\n                        }),\n                    ]));\n                }\n            } else if (currentPostIndex === postIds.length - 1) {\n                // If this is the last post\n\n                const readersEnd = normalizeReadersRelationship(discussion.clarkwinkelmannWhoReaders()).filter(\n                    reader => normalizePostNumber(reader.last_read_post_number()) >= normalizePostNumber(discussion.lastPostNumber())\n                );\n\n                items.add('who-read', Button.component({\n                    className: 'Button Button--link',\n                    onclick: (event: Event) => {\n                        event.preventDefault();\n\n                        app.modal.show(ReadersModal, {\n                            readersEnd,\n                        });\n                    },\n                    title: extractText(app.translator.trans(translationPrefix + 'read-to-end', {\n                        count: readersEnd.length,\n                    })),\n                }, [\n                    readersEnd.length,\n                    ' ',\n                    icon('fas fa-check-double'),\n                    ' ',\n                    m(AvatarSummary, {\n                        readers: readersEnd,\n                    }),\n                ]));\n\n                if (discussion.attribute('whoReadCanMarkUnread')) {\n                    items.add('who-read-unread', m(UnreadButton, {\n                        className: 'Button',\n                        discussion,\n                    }));\n                }\n            }\n        });\n    });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","import {extend} from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionListState from 'flarum/forum/states/DiscussionListState';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Badge from 'flarum/common/components/Badge';\nimport Model from 'flarum/common/Model';\nimport UserState from './models/UserState';\nimport addInDiscussionHero from './addInDiscussionHero';\nimport addInDiscussionList from './addInDiscussionList';\nimport addInPostStream from './addInPostStream';\nimport addUnreadControls from './addUnreadControls';\n\napp.initializers.add('clarkwinkelmann-who-read', () => {\n    app.store.models['clarkwinkelmann-who-readers'] = UserState;\n    Discussion.prototype.clarkwinkelmannWhoReaders = Discussion.hasMany('clarkwinkelmannWhoReaders');\n\n    extend(Discussion.prototype, 'badges', function (items) {\n        if (this.attribute('whoReadUnread')) {\n            items.add('who-read-unread', Badge.component({\n                type: 'who-read-unread',\n                icon: app.forum.attribute('who-read.unreadIcon'),\n                label: app.translator.trans('clarkwinkelmann-who-read.forum.badges.unread'),\n            }));\n        }\n    });\n\n    // When Flarum sets the last read post in DiscussionPage.positionChanged, we want to trigger a redraw after the request finishes\n    extend(Model.prototype, 'save', function (promise, attributes) {\n        if (attributes.lastReadPostNumber) {\n            promise.then(() => {\n                m.redraw();\n            });\n        }\n    });\n\n    extend(DiscussionListState.prototype, 'requestParams', function (params) {\n        if (!app.forum.attribute('who-read.canSee')) {\n            return;\n        }\n\n        if (!Array.isArray(params.include)) {\n            return;\n        }\n\n        params.include.push('clarkwinkelmannWhoReaders.user.groups');\n    });\n\n    addInDiscussionHero();\n    addInDiscussionList();\n    addInPostStream();\n    addUnreadControls();\n});\n","import {extend} from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport Button from 'flarum/common/components/Button';\nimport Discussion from 'flarum/common/models/Discussion';\nimport DiscussionHero from 'flarum/forum/components/DiscussionHero';\nimport AvatarSummary from './components/AvatarSummary';\nimport ReadersModal from './components/ReadersModal';\nimport filterVeryBehind from './utils/filterVeryBehind';\nimport normalizePostNumber from './utils/normalizePostNumber';\nimport normalizeReadersRelationship from './utils/normalizeReadersRelationship';\n\nexport default function () {\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        if (!app.forum.attribute('who-read.showInHero')) {\n            return;\n        }\n\n        const discussion: Discussion = (this.attrs as any).discussion;\n\n        const readers = filterVeryBehind(normalizeReadersRelationship(discussion.clarkwinkelmannWhoReaders()), discussion);\n\n        if (readers.length === 0) {\n            return;\n        }\n\n        items.add('who-read', Button.component({\n            className: 'Button Button--link',\n            onclick: (event: Event) => {\n                event.preventDefault();\n\n                app.modal.show(ReadersModal, {\n                    readersEnd: readers.filter(\n                        reader => normalizePostNumber(reader.last_read_post_number()) >= normalizePostNumber(discussion.lastPostNumber())\n                    ),\n                    readersBehind: readers.filter(\n                        reader => normalizePostNumber(reader.last_read_post_number()) < normalizePostNumber(discussion.lastPostNumber())\n                    ),\n                });\n            },\n        }, m(AvatarSummary, {\n            readers,\n            discussion,\n            extendable: true,\n        })));\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionList from 'flarum/forum/components/DiscussionList';\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\nimport AvatarSummary from './components/AvatarSummary';\nimport filterVeryBehind from './utils/filterVeryBehind';\n\nexport default function () {\n    extend(DiscussionList.prototype, 'requestParams' as any, function (params: any) {\n        if (!app.forum.attribute('who-read.showInDiscussionList')) {\n            return;\n        }\n\n        params.include.push('clarkwinkelmannWhoReaders.user.groups');\n    });\n\n    extend(DiscussionListItem.prototype, 'infoItems', function (items) {\n        if (!app.forum.attribute('who-read.showInDiscussionList')) {\n            return;\n        }\n\n        const {discussion} = this.attrs;\n\n        let readers = discussion.clarkwinkelmannWhoReaders();\n\n        if (!readers) {\n            return;\n        }\n\n        readers = filterVeryBehind(readers, discussion);\n\n        if (readers.length) {\n            items.add('who-read', m(AvatarSummary, {\n                readers,\n                discussion,\n            }), -120);\n        }\n    });\n}\n","import {extend} from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport UnreadButton from './components/UnreadButton';\n\nexport default function () {\n    extend(DiscussionControls, 'userControls', (items, discussion) => {\n        if (!discussion.attribute('whoReadCanMarkUnread')) {\n            return;\n        }\n\n        items.add('who-read-unread', m(UnreadButton, {\n            discussion,\n        }));\n    });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","UserState","last_read_at","Model","last_read_post_number","subscription","unread","user","translationPrefix","badges","reader","extensions","add","Badge","label","app","icon","type","number","AvatarSummary","showAll","view","vnode","LIMIT","attrs","readers","extendable","discussion","m","map","index","howManyMore","length","title","extractText","count","onclick","event","stopPropagation","ItemList","appendReaderBadges","outdated","normalizePostNumber","lastPostNumber","toolTipTranslationKey","Tooltip","text","ago","humanTime","className","avatar","listItems","toArray","AvatarsDetails","Link","href","userOnline","username","ReadersModal","content","this","section","dataKey","translationKey","Modal","filter","behindThreshold","UnreadButton","attribute","Button","save","whoReadUnread","then","redraw","Discussion","extend","items","promise","attributes","lastReadPostNumber","DiscussionListState","params","Array","isArray","include","push","DiscussionHero","filterVeryBehind","normalizeReadersRelationship","clarkwinkelmannWhoReaders","preventDefault","readersEnd","readersBehind","DiscussionList","DiscussionListItem","Post","subtree","check","post","JSON","stringify","id","CommentPost","forEach","Component","data","relationships","posts","postIds","currentPostIndex","indexOf","nextPostId","nextPost","readersUntilHereOnly","readersFurther","totalReadersWhoHaveSeenThisPost","DiscussionControls"],"sourceRoot":""}